#!/sbin/sh
#BusyBox Installer
#by YashdSaraf@XDA

OPFD=$2
BBZIP=$3
INSTALLDIR="none"
ARCH=
ARCH64=
DATE=
STATUS=
VER=
SELINUXPRESENT=0

ui_print() {
    echo -e "ui_print $1\n
    ui_print" >> /proc/self/fd/$OPFD
    echo -e "$1" >> $LOGFILE
}

error() {
    local ERRSTAT=$?
    if [ $ERRSTAT -ne 0 ]
        then
        ui_print "  "
        ui_print " ***Abort!!*** "
        ui_print "Cause: $1"
        [ ! -z $LOGFILE ] && ui_print "Check $LOGFILE for errors"
        if [ $INSTALLDIR != "none" -a -d $INSTALLDIR/tmp.bbxyds ]
            then rm -rf $INSTALLDIR/tmp.bbxyds
        fi
        [ "$_mounted" == "no" ] && umount /system
        exit "$ERRSTAT"
    else sleep 0.5
    fi
}

is_mounted() {
    grep "$1" /proc/mounts >/dev/null 2>&1
    return $?
}

mount_() {
    /sbin/mount $* || toolbox mount $* ||
    toybox mount $* || return 1
}

mount_systemless () {
    #Following code to mount su.img is borrowed from supersu update-binary
    if [ ! -d $2 ]
        then
        mkdir $2 2>/dev/null
        chmod 755 $2
    fi
    LOOPDEVICE=
    for LOOP in 0 1 2 3 4 5 6 7
    do
        if (! is_mounted $2)
            then LOOPDEVICE=/dev/block/loop$LOOP
            if [ ! -f "$LOOPDEVICE" ]
                then mknod $LOOPDEVICE b 7 $LOOP
            fi
            losetup $LOOPDEVICE $1
            if [ "$?" -eq "0" ]
                then
                mount_ -t ext4 -o loop $LOOPDEVICE $2
            fi
            if (is_mounted $2)
                then
                echo $LOOPDEVICE
                return 0
            fi
        fi
    done
    return 1
}

set_permissions() {
    chmod $2 $1
    if ! chown $3:$4 $1 2>/dev/null
        then chown $3.$4 $1 2>/dev/null
    fi
    (( $SELINUXPRESENT )) && chcon $5 $1
}

#embedded mode support
readlink /proc/$$/fd/$OPFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]
    then
    OPFD=0
    for FD in `ls /proc/$$/fd`
    do
        readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
        if [ "$?" -eq "0" ]
            then
            ps | grep " 3 $FD " | grep -v grep >/dev/null
              if [ "$?" -eq "0" ]
                  then
                OPFD=$FD
                break
            fi
        fi
    done
fi

( mount_ /data 
mount_ /cache ) 2>/dev/null

#Redirect all errors to LOGFILE
for partition in /sdcard /data /cache
do
    if [ -w $partition ]
        then SDCARD=$partition
        break
    fi
done

if [ -z $SDCARD ]
    then false
    error "No accessible partition detected"
fi

LOGFILE=$SDCARD/BusyBox-YDS-installer.log
echo "#`date`
#Ignore umount errors!" > $LOGFILE
exec 2>>$LOGFILE

ui_print "================================================"
ui_print "   BusyBox $VER $ARCH ($STATUS: $DATE)   "
ui_print "         -----by YashdSaraf@XDA-----            "
ui_print "================================================"
ui_print "  "
sleep 1

ui_print "Mounting /system --"

if (is_mounted /system)
    then
    mount_ -o rw,remount -t auto /system
    error "Error while mounting /system"
    _mounted="yes"
else
    mount_ -o rw -t auto /system
    error "Error while mounting /system"
    _mounted="no"
fi

ui_print "Checking Architecture --"

FOUNDARCH="$(grep -Eo "ro.product.cpu.abi(2)?=.+" /system/build.prop /default.prop 2>/dev/null | grep -Eo "[^=]*$" | head -n1)"

ui_print "Looking for => '$ARCH', found => '$FOUNDARCH'"


if [ "${FOUNDARCH::${#ARCH64}}" == "$ARCH64" ]
    then
    BBFILE=busybox64
    ui_print "64 bit architecture detected --"
elif [ "${FOUNDARCH::${#ARCH}}" == "$ARCH" ]
    then
    BBFILE=busybox
    ui_print "32 bit architecture detected --"
else
    false
    error "Wrong architecture found"
fi

ui_print "Checking if busybox needs to have SELinux support --"

API=`grep -E "ro.build.version.sdk=.+" /system/build.prop /default.prop 2>/dev/null | grep -Eo "[^=]*$" | head -n1`

SELSTAT="DISABLED"
if [ -e /sys/fs/selinux/enforce ]
    then
    SELSTAT="ENABLED"
    SELINUXPRESENT=1
fi

# Read and parse bbx.conf if present
for i in /sdcard /data /cache
do
    if [ -f $i/bbx.conf ]
        then
        ui_print "Found $i/bbx.conf --"
        for line in `cat $i/bbx.conf`
        do
            option=${line%=*}
            value=${line#*=}
            case $option in
                selinux)
                    case $value in
                        0) SELSTAT="DISABLED (user override)"
                        ;;
                        1) SELSTAT="ENABLED (user override)"
                        ;;
                        *) ui_print "Invalid option set for 'selinux' => $value (should be 0 or 1)"
                        ;;
                    esac
                ;;
                noclean)
                    NOCLEAN=1
                ;;
                installdir)
                    if ! [ -z $value ]
                        then
                        if ! [ -e $value ]
                            then mkdir $value
                            error "Error while creating $value"
                            set_permissions $value 0755 0 0 u:object_r:system_file:s0
                            INSTALLDIR=$value
                        elif ! [ -d $value -a -w $value ]
                            then ui_print "Directory not accessible => $value"
                        else INSTALLDIR=$value
                        fi
                    else ui_print "Installation directory cannot be empty"
                    fi
                ;;
                *) ui_print "Invalid entry in config => $option"
                ;;
            esac
        done
        break
    fi
done
unset i

BBSEL=
if echo "$SELSTAT" | grep ENABLED >/dev/null 2>&1
    then
    BBSEL=-sel
fi

ui_print "  "
ui_print "SELinux support is $SELSTAT --"

SUIMG=$(
    ls /data/su.img || ls /cache/su.img
) 2>/dev/null
MAGISK=$(
    ls /data/magisk.img || ls /cache/magisk.img
) 2>/dev/null

if ! [ -z "$SUIMG" -a -z "$MAGISK" ]
    then
    ui_print "Systemless root detected --"
    [ -z "$SUIMG" ] || SULOOPDEV=$(mount_systemless $SUIMG "/su")
    [ -z "$MAGISK" ] || MAGISKLOOPDEV=$(mount_systemless $MAGISK "/magisk")
fi

POSSIBLE_INSTALLDIRS="/su/xbin /magisk/phh/bin /system/xbin /system/vendor/xbin /vendor/xbin"
if [ $INSTALLDIR == "none" ]
    then
    for dir in $POSSIBLE_INSTALLDIRS
    do
        if [ -d $dir -a -w $dir ]
            then INSTALLDIR=$dir
            break
        fi
    done

    if [ $INSTALLDIR == "none" ]
        then
        INSTALLDIR="/system/xbin"
        mkdir $INSTALLDIR
        error "No accessible directory found for installation"
        set_permissions $INSTALLDIR 0755 0 0 u:object_r:system_file:s0
    fi
else USER_INSTALLDIR=$INSTALLDIR
fi

if ! (( $NOCLEAN ))
    then
    ui_print "Cleaning up older busybox versions (if any) --"
    TOTALSYMLINKS=0
    POSSIBLE_CLEANDIRS="/system/xbin /system/bin /su/xbin /su/bin /magisk/phh/bin /vendor/xbin /vendor/bin /system/vendor/bin /system/vendor/xbin $USER_INSTALLDIR"
    for dir in $POSSIBLE_CLEANDIRS
    do
        if [ -e $dir/busybox ]
            then
            ui_print "Found in $dir --"
            cd $dir
            count=0
            for k in $(ls | grep -v busybox)
            do
                if [ "$k" -ef "busybox" -o -x $k -a "`head -n 1 $k`" == "#!$dir/busybox" ]
                    then
                    rm -f $k
                    count=$((count+1))
                fi
            done
            rm -f busybox ssl_helper
            error "Error while cleaning BusyBox in $i"
            TOTALSYMLINKS=$((TOTALSYMLINKS+count))
        fi
    done
    if [ $TOTALSYMLINKS -gt 0 ]
        then ui_print "Total applets removed => $TOTALSYMLINKS --"
        ui_print "  "
    fi
fi

BBFILE="${BBFILE}${BBSEL}.xz"

ui_print "Extracting Binary to $INSTALLDIR --"
cd $INSTALLDIR
mkdir -p tmp.bbxyds
cd tmp.bbxyds
unzip -o "$BBZIP" bins.md5 $BBFILE ssl_helper xzdec
ui_print "Checking md5sums of extracted bins --"
for i in $BBFILE ssl_helper xzdec
do
    [ -e $i ]
    error "Error while unzipping $BBZIP to $INSTALLDIR"
    grep "$(md5sum $i)" bins.md5 >/dev/null 2>&1
    error "Error while checking md5sum of $i"
done
unset i
set_permissions xzdec 0555 0 2000 u:object_r:system_file:s0
set_permissions ssl_helper 0555 0 2000 u:object_r:system_file:s0
./xzdec $BBFILE > busybox
set_permissions busybox 0555 0 2000 u:object_r:system_file:s0
mv busybox ssl_helper ../
cd ..
rm -rf tmp.bbxyds

ui_print "Setting up applets --"
for i in $(./busybox --list)
do
    # Only install applets which are not present in the system
    # Fixes the error of busybox applets being called instead of system's default applets
    # since magisk installs bins to /sbin which precedes /system
    if [ "$INSTALLDIR" == "/magisk/phh/bin" ] && [ -e /system/bin/$i -o -e /system/xbin/$i ]
        then continue
    fi
    ./busybox ln -s busybox $i 2>/dev/null
    if [ ! -e $i ]
        then
        #Make wrapper scripts for applets if symlinking fails
        echo "#!$INSTALLDIR/busybox" > $i
        error "Error while setting up applets"
        set_permissions $i 0555 0 2000 u:object_r:system_file:s0
    fi
done
unset i

if [ -d /system/addon.d -a -w /system/addon.d ]
    then
    ui_print "Adding OTA survival script --"
    unzip -o "$BBZIP" 88-busybox.sh
    set_permissions 88-busybox.sh 0755 0 0 u:object_r:system_file:s0
    mv 88-busybox.sh /system/addon.d
fi

ui_print "Adding common system users and groups --"
etc=$(
    ls -d /system/etc || ls -d /etc
) 2>/dev/null

if [ ! -z $etc -a -d $etc -a -w $etc ]
    then
    unzip -o "$BBZIP" addusergroup.sh
    . ./addusergroup.sh || ui_print "Warning: Could not add common system users and groups!"
    rm addusergroup.sh
else ui_print "ETC directory is **NOT** accessible --"
fi

# cd to the root directory to avoid "device or resource busy" errors while unmounting 
cd /

ui_print "Unmounting /system --"
ui_print "  "
if [ ! -z $SULOOPDEV ]
    then umount /su
    losetup -d $SULOOPDEV
    rmdir /su
fi
if [ ! -z $MAGISKLOOPDEV ]
    then umount /magisk
    losetup -d $MAGISKLOOPDEV
    rmdir /magisk
fi
umount /system
ui_print "All DONE! -- Check $LOGFILE for more info"
sleep 0.5
